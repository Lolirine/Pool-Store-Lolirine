name: Deploy to OVH VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Charge la clé privée depuis le secret VPS_SSH_KEY
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Deploy over SSH
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}          # ex: 51.38.34.23
          VPS_USER: ${{ secrets.VPS_USER }}          # ex: ubuntu
          REPO_SSH_URL: ${{ secrets.REPO_SSH_URL }}  # git@github.com:lolirine/Pool-store-Lolirine.git
          DATABASE_URL: ${{ secrets.DATABASE_URL }}  # URI PostgreSQL OVH (sslmode=require)
          APP_PORT: ${{ secrets.APP_PORT }}          # ex: 3000
          GIT_SHA: ${{ github.sha }}
        run: |
          set -euo pipefail
          APP_PORT="${APP_PORT:-3000}"
          SSH_OPTS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

          ssh $SSH_OPTS "$VPS_USER@$VPS_HOST" bash -s <<'EOS'
          set -euo pipefail
          # Variables importées de l'environnement du step
          : "${REPO_SSH_URL:?missing}"; : "${DATABASE_URL:?missing}"; : "${APP_PORT:?missing}"; : "${GIT_SHA:?missing}"

          # 1) Docker + compose plugin
          if ! command -v docker >/dev/null; then
            curl -fsSL https://get.docker.com | sh
            sudo systemctl enable --now docker
          fi
          if ! docker compose version >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y docker-compose-plugin
          fi

          # 2) Code à jour
          mkdir -p ~/apps && cd ~/apps
          if [ ! -d "Pool-store-Lolirine/.git" ]; then
            git clone --depth=1 "$REPO_SSH_URL" Pool-store-Lolirine
          fi
          cd Pool-store-Lolirine
          git fetch --depth=1 origin main
          git checkout -f main
          git reset --hard origin/main

          # 3) Env applicatif (non versionné)
          cd lolirinepool
          printf 'DATABASE_URL=%s\nPORT=%s\n' "$DATABASE_URL" "$APP_PORT" > .env

          # 4) Rebuild + redeploy forcés
          docker compose down || true
          docker compose build --pull --no-cache --build-arg GIT_SHA="$GIT_SHA"
          docker compose up -d --force-recreate --remove-orphans

          # 5) Sanity
          docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
          EOS
